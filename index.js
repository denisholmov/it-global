const crc32 = require("crc-32"); // библиотека которую нужно установить чтобы использовать функцию хэширования

// Ассоциативный массив(объект) - это удобный СПОСОБ хранить данные. Это абстрактный тип данных, с помощью которого хранятся пары
// ключ-значение.

// Для реализации ассоциативных массивов часто используют специальную структуру данныъ хэш-таблицу. Хэш-таблица это 2 вещи: индексированный массив и
// функция для хэширования ключей.

// хэширование - операция, которая преобразует любые входные данные в строку(реже число) фиксированной длины.

const obj = {
    age: 20,
}; // это объект-пример, опираясь на него ниже мы своими ручками организовываем хэш таблицу. Чтобы понять как этот объект хранится в памяти.

//  смотрим как под капотом происходит формирование ассоциативного массива, то есть как сохраняется в память наш объект.

// сделали хэширование данных data
const data = "Hello world"; // превратим эту строку в хэш. хэшируем.
const hash = crc32.str(data); // хэширование. -1948869038
const index = Math.abs(hash) % 1000; // 38
// сделали хэширование данных data

// =======================

const internal = [];

const hash1 = crc32.str("age"); // -1590685518 хэш ключа age
const index1 = Math.abs(hash1) % 1000; // 518 укороченный положительный хэш

internal[index1] = ["age", "20"]; // [518: ["age", "20"]] 

console.log(internal);


const hash2 = crc32.str("age");
const index2 = Math.abs(hash1) % 1000;

console.log(internal[index2], "Прочитал");

// ===================

const make = () => {
    const internal = [];

    return internal;
}

const set = () => {}

const get = () => {}


const map = make();
let result = get(map, "key");
console.log(result); // null


// ================================
const obj1 = {
    age: 20,
};